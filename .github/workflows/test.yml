name: Tests

on:
  push:
    branches: [main]
  pull_request:
  workflow_call:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  DEPOT_PROJECT: lc6t0h7bhh
  RUSTC_WRAPPER: sccache

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-rust-pr
  cancel-in-progress: true

jobs:
  check-rust-format:
    runs-on: depot-ubuntu-24.04-small
    steps:
      - name: Get sources
        uses: actions/checkout@v4

      - name: Install Rust
        uses: ./.github/actions/install-rust
        with:
          components: rustfmt

      - name: cargo fmt
        shell: bash
        run: |
          cargo fmt --check

  check-toml-format:
    runs-on: depot-ubuntu-24.04-small
    steps:
      - name: Get sources
        uses: actions/checkout@v4

      - uses: uncenter/setup-taplo@4f203fdb4f3b1e289c8382cf90d8397d2338df2e # v1.0.8
        with:
          version: "0.9.3"

      - name: taplo fmt check
        shell: bash
        run: |
          taplo fmt --check
          taplo check

  unit-tests:
    needs: [check-rust-format, check-toml-format]
    strategy:
      fail-fast: false
      matrix:
        platform:
          [
            {
              "target": "x86_64-unknown-linux-musl",
              "runner": "depot-ubuntu-24.04-8",
            },
            {
              "target": "aarch64-unknown-linux-musl",
              "runner": "depot-ubuntu-24.04-arm-8",
            },
            {
              "target": "aarch64-apple-darwin",
              "runner": "depot-macos-latest",
            },
          ]
    runs-on: ${{ matrix.platform.runner }}
    env:
      RUSTFLAGS: "-D warnings"
    steps:
      - name: Get sources
        uses: actions/checkout@v4

      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@7d986dd989559c6ecdb630a3fd2557667be217ad # v0.0.9

      - name: Cache cargo registry and build
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-${{ matrix.platform.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.platform.target }}-cargo-

      - name: Install Rust
        uses: ./.github/actions/install-rust
        with:
          target: ${{ matrix.platform.target }}
          components: clippy, rustfmt

      - name: Install musl-tools
        if: ${{ contains(matrix.platform.target, 'linux') }}
        shell: bash
        run: |
          sudo apt-get update

          if [[ "${{ matrix.platform.target }}" == "x86_64-unknown-linux-musl" ]]; then
            # Install native musl tools for x86_64
            sudo apt-get install -y musl-tools
          elif [[ "${{ matrix.platform.target }}" == "aarch64-unknown-linux-musl" ]]; then
            sudo apt-get install -y musl-tools musl-dev

            # Create symlinks for the expected compiler names
            sudo ln -sf /usr/bin/musl-gcc /usr/local/bin/aarch64-linux-musl-gcc
            sudo ln -sf /usr/bin/ar /usr/local/bin/aarch64-linux-musl-ar

            # Verify installation
            which aarch64-linux-musl-gcc
            aarch64-linux-musl-gcc --version

            # Set up environment to disable assembly in zstd-sys for ARM64
            # This works around the issue where zstd-sys tries to compile x86_64 assembly on ARM64
            echo "CC_aarch64_unknown_linux_musl=aarch64-linux-musl-gcc" >> $GITHUB_ENV
            echo "AR_aarch64_unknown_linux_musl=aarch64-linux-musl-ar" >> $GITHUB_ENV
          fi

      - name: Install cargo-nextest
        uses: taiki-e/install-action@e8c1cf74a696e981aec979a6703471e61b400895 # v2.57.4
        with:
          tool: nextest

      - name: Cargo check
        shell: bash
        run: |
          cargo check \
            --locked \
            --target ${{ matrix.platform.target }}

      - name: Clippy
        shell: bash
        run: |
          cargo clippy \
            --locked \
            --target ${{ matrix.platform.target }}

      - name: Unit Tests
        id: unit-tests
        shell: bash
        run: |
          cargo nextest run --target ${{ matrix.platform.target }} --no-tests=warn --profile ci --lib

  integration-tests:
    needs: [check-rust-format, check-toml-format]
    runs-on: depot-ubuntu-24.04-8
    env:
      RUSTFLAGS: "-D warnings"
    steps:
      - name: Get sources
        uses: actions/checkout@v4

      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@7d986dd989559c6ecdb630a3fd2557667be217ad # v0.0.9

      - name: Cache cargo registry and build
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-x86_64-unknown-linux-musl-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-x86_64-unknown-linux-musl-cargo-

      - name: Install Rust
        uses: ./.github/actions/install-rust
        with:
          target: x86_64-unknown-linux-musl
          components: clippy, rustfmt

      - name: Install musl-tools
        shell: bash
        run: |
          sudo apt-get update
          # Install native musl tools for x86_64 (integration tests only run on x86_64)
          sudo apt-get install -y musl-tools

      - name: Install cargo-nextest
        uses: taiki-e/install-action@e8c1cf74a696e981aec979a6703471e61b400895 # v2.57.4
        with:
          tool: nextest

      # Start OAuth2 provider containers for integration testing
      - name: Start Hydra containers for OAuth2 tests
        shell: bash
        run: |
          cd crates/integration-tests
          echo "Starting Hydra containers for OAuth2 integration tests..."

          # Start containers in background
          docker compose up -d

          # Wait for Hydra 1 to be ready
          echo "Waiting for Hydra 1 (port 4444) to be ready..."
          timeout 120s bash -c 'until curl -f http://127.0.0.1:4444/health/ready >/dev/null 2>&1; do
            echo "Waiting for Hydra 1..."; sleep 3;
          done' || {
            echo "Hydra 1 failed to start, checking logs..."
            docker compose logs hydra
            exit 1
          }

          # Wait for Hydra 2 to be ready
          echo "Waiting for Hydra 2 (port 4454) to be ready..."
          timeout 120s bash -c 'until curl -f http://127.0.0.1:4454/health/ready >/dev/null 2>&1; do
            echo "Waiting for Hydra 2..."; sleep 3;
          done' || {
            echo "Hydra 2 failed to start, checking logs..."
            docker compose logs hydra-2
            exit 1
          }

          echo "Both Hydra containers are ready for OAuth2 testing"
          docker compose ps

      - name: Integration Tests
        id: integration-tests
        shell: bash
        run: |
          cargo nextest run --target x86_64-unknown-linux-musl --no-tests=warn --profile ci --test integration_tests

      # Clean up OAuth2 test containers
      - name: Stop Hydra containers
        if: always()
        shell: bash
        run: |
          cd crates/integration-tests
          echo "Stopping Hydra containers..."
          docker compose down -v
          echo "Hydra containers stopped and volumes cleaned"
  docker-dev:
    if: github.event_name == 'pull_request'
    needs: [check-rust-format, check-toml-format]
    runs-on: depot-ubuntu-24.04-8
    permissions:
      packages: write
      contents: read
      id-token: write
    steps:
      - name: Get sources
        uses: actions/checkout@v4

      - name: Build and push Docker image
        uses: ./.github/actions/docker-build
        with:
          commit_sha: ${{ github.event.pull_request.head.sha || github.sha }}
          dockerhub_username: ${{ secrets.DOCKERHUB_USERNAME }}
          dockerhub_token: ${{ secrets.DOCKERHUB_TOKEN }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          depot_project: ${{ env.DEPOT_PROJECT }}
          depot_token: ${{ secrets.DEPOT_TOKEN }}
          pr_number: ${{ github.event.pull_request.number }}

  docker-main:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [check-rust-format, check-toml-format, unit-tests, integration-tests]
    runs-on: depot-ubuntu-24.04-8
    permissions:
      packages: write
      contents: read
      id-token: write
    steps:
      - name: Get sources
        uses: actions/checkout@v4

      - name: Build and push Docker image
        uses: ./.github/actions/docker-build
        with:
          commit_sha: ${{ github.sha }}
          dockerhub_username: ${{ secrets.DOCKERHUB_USERNAME }}
          dockerhub_token: ${{ secrets.DOCKERHUB_TOKEN }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          depot_project: ${{ env.DEPOT_PROJECT }}
          depot_token: ${{ secrets.DEPOT_TOKEN }}
          add_latest_tag: "true"

  after-build-rust:
    # This job is responsible for reacting to build success or failure. It must
    # happen after the builds, hence the `needs`. But it must not be skipped
    # when the builds are cancelled or fail (hence the `if: ${{ always() }}`).
    # Only needed on PRs as a branch protection anchor.
    if: github.event_name == 'pull_request'
    needs: [check-rust-format, check-toml-format, unit-tests, integration-tests]
    runs-on: depot-ubuntu-24.04-small
    steps:
      - name: Check that the builds succeeded
        run: exit 1
        if: ${{ contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled') }}
