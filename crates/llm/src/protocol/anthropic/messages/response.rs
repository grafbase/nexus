use std::fmt;

use serde::{Deserialize, Serialize};

use crate::protocol::{
    anthropic::{
        error::{Error, ErrorResponse},
        messages::ResponseContent,
    },
    unknown_fields::UnknownFields,
};

use super::{ResponseContextManagement, Role};

#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(tag = "type", rename_all = "snake_case")]
pub enum Response {
    Error(Box<ErrorResponse>),
    Message(Box<MessageResponse>),
}

impl Response {
    pub fn as_message(&self) -> Option<&MessageResponse> {
        match self {
            Response::Message(msg) => Some(msg),
            _ => None,
        }
    }
}

impl From<Error> for Response {
    fn from(error: Error) -> Self {
        Self::Error(Box::new(ErrorResponse {
            request_id: None,
            error,
        }))
    }
}

/// Response body returned by the Anthropic Messages API.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MessageResponse {
    /// Unique identifier for the returned message.
    pub id: String,
    /// Role of the message writer (Anthropic returns "assistant").
    pub role: Role,
    /// Structured content blocks comprising the assistant reply.
    pub content: Vec<ResponseContent>,
    /// Model that produced the response.
    pub model: String,

    /// Reason generation stopped, when provided.
    #[serde(default)]
    pub stop_reason: Option<StopReason>,

    /// Custom stop sequence that terminated generation, if any.
    #[serde(default)]
    pub stop_sequence: Option<String>,

    /// Token usage metrics for billing and rate limiting.
    pub usage: Usage,

    /// Context management edits Anthropic applied during processing.
    #[serde(default)]
    pub context_management: Option<ResponseContextManagement>,

    /// Container metadata returned when container tools are used.
    #[serde(default)]
    pub container: Option<Container>,

    #[serde(flatten)]
    pub unknown_fields: UnknownFields,
}

/// Reasons why Anthropic ended generation.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
#[serde(rename_all = "snake_case")]
pub enum StopReason {
    EndTurn,
    MaxTokens,
    StopSequence,
    ToolUse,
    PauseTurn,
    Refusal,
    ModelContextWindowExceeded,

    #[serde(untagged)]
    Unknown(String),
}

impl fmt::Display for StopReason {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        match self {
            StopReason::EndTurn => write!(f, "end_turn"),
            StopReason::MaxTokens => write!(f, "max_tokens"),
            StopReason::StopSequence => write!(f, "stop_sequence"),
            StopReason::ToolUse => write!(f, "tool_use"),
            StopReason::PauseTurn => write!(f, "pause_turn"),
            StopReason::Refusal => write!(f, "refusal"),
            StopReason::ModelContextWindowExceeded => write!(f, "model_context_window_exceeded"),
            StopReason::Unknown(s) => write!(f, "{s}"),
        }
    }
}

/// Token usage summary returned by Anthropic.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct Usage {
    /// Total input tokens consumed for this request.
    pub input_tokens: u32,
    /// Total output tokens generated by Claude.
    pub output_tokens: u32,

    /// Breakdown of tokens written to cache.
    #[serde(default)]
    pub cache_creation: Option<CacheCreation>,

    /// Input tokens spent creating cache entries.
    #[serde(default)]
    pub cache_creation_input_tokens: Option<u32>,

    /// Input tokens read from cache instead of recomputed.
    #[serde(default)]
    pub cache_read_input_tokens: Option<u32>,

    /// Number of Anthropic-managed server tool calls.
    #[serde(default)]
    pub server_tool_use: Option<ServerToolUsage>,

    /// Service tier used for billing the request.
    #[serde(default)]
    pub service_tier: Option<UsageServiceTier>,

    /// Extra usage metrics kept for compatibility.
    #[serde(flatten)]
    pub unknown_fields: UnknownFields,
}

/// Breakdown of cached token usage.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct CacheCreation {
    /// Tokens used to create the one-hour ephemeral cache entry.
    pub ephemeral_1h_input_tokens: u32,
    /// Tokens used to create the five-minute ephemeral cache entry.
    pub ephemeral_5m_input_tokens: u32,

    /// Additional cache metrics retained without interpretation.
    #[serde(flatten)]
    pub unknown_fields: UnknownFields,
}

/// Usage of Anthropic managed server tools.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ServerToolUsage {
    /// Count of web fetch tool requests.
    pub web_fetch_requests: u32,
    /// Count of web search tool requests.
    pub web_search_requests: u32,

    #[serde(flatten)]
    pub unknown_fields: UnknownFields,
}

/// Reported service tier for the request.
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(rename_all = "snake_case")]
pub enum UsageServiceTier {
    Standard,
    Priority,
    Batch,
    #[serde(untagged)]
    Unknown(String),
}

/// Container information surfaced in responses when container tools are used.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct Container {
    /// Identifier for the container used to execute code.
    pub id: String,
    /// Expiration timestamp for the container.
    pub expires_at: String,

    #[serde(flatten)]
    pub unknown_fields: UnknownFields,
}
