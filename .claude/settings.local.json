{
  "permissions": {
    "allow": [
      "Bash(jj status:*)",
      "Bash(jj split:*)",
      "Bash(jj diff:*)",
      "Bash(jj describe:*)",
      "Bash(jj abandon:*)",
      "Bash(cargo check:*)",
      "Bash(cargo doc:*)",
      "Bash(cargo tree:*)",
      "Bash(grep:*)",
      "WebFetch(domain:docs.rs)",
      "Bash(cargo clippy:*)",
      "Bash(cargo nextest:*)",
      "Bash(TEST_LOG=1 cargo nextest run -p integration-tests mcp_server_rate_limit --no-capture)",
      "Bash(find:*)",
      "Bash(true)",
      "Bash(ls:*)",
      "WebFetch(domain:docs.anthropic.com)",
      "Bash(jj log:*)",
      "Bash(rm:*)",
      "Bash(ln:*)",
      "Bash(curl:*)",
      "Bash(cargo fmt:*)",
      "mcp__linear-server__search_documentation",
      "Bash(cargo make:*)",
      "WebFetch(domain:github.com)",
      "Bash(cargo insta:*)",
      "Bash(jj squash:*)",
      "Bash(jj show:*)",
      "Bash(cargo build:*)",
      "Bash(mv:*)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests ai::ai_endpoint_disabled_by_default --no-capture)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests ai::ai_endpoint_enabled --no-capture)",
      "Bash(cargo test:*)",
      "WebFetch(domain:docs.litellm.ai)",
      "WebFetch(domain:platform.openai.com)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests oauth2::forwarding::search_behavior_without_auth --no-capture)",
      "Bash(RUST_BACKTRACE=1 cargo nextest run -p integration-tests oauth2::forwarding::search_behavior_without_auth --no-capture)",
      "Bash(env RUST_BACKTRACE=1 cargo nextest run -p integration-tests oauth2::forwarding::search_behavior_without_auth --no-capture)",
      "WebFetch(domain:modelcontextprotocol.io)",
      "Bash(NEXTEST_TEST_FILTER=\"\" cargo test -p config all_values)",
      "mcp__linear-server__list_issues",
      "mcp__kagi__kagi_search_fetch",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests llm::list_models --no-capture)",
      "Bash(mkdir:*)",
      "Bash(export OPENAI_API_KEY=test-key)",
      "Bash(../target/release/nexus --help)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests llm::chat_completions_simple --no-capture)",
      "Bash(/dev/null)",
      "WebFetch(domain:raw.githubusercontent.com)",
      "Bash(cargo clean:*)",
      "Bash(TEST_LOG=debug cargo test -p integration-tests anthropic_provider_lists_models -- --nocapture)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests llm::google::simple_completion --no-capture)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests llm::error_handling::list_models_with_auth_error_returns_401 --no-capture)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests llm::error_handling::provider_internal_error_returns_500_with_message --no-capture)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests llm::error_handling::streaming_mock_not_implemented_returns_error --no-capture)",
      "Bash(RUST_BACKTRACE=1 cargo nextest run -p integration-tests llm::streaming::openai_streaming_returns_sse_format --no-capture)",
      "Bash(TEST_LOG=debug cargo nextest run -p integration-tests llm::streaming::google_streaming_returns_sse_format --no-capture)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests google_streaming_returns_sse_format --no-capture)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests openai_streaming_returns_sse_format --no-capture)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests anthropic_streaming_returns_sse_format --no-capture)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests streaming_error_returns_error_in_stream --no-capture)",
      "WebFetch(domain:ai.google.dev)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests handles_fragmented_openai_chunks --no-capture)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests openai_handles_escape_sequences_in_streaming --no-capture)",
      "Bash(rg:*)",
      "Bash(pkill:*)",
      "Bash(RUSTFLAGS=\"-D warnings\" cargo clippy --all-targets --all-features)",
      "Bash(cargo machete:*)",
      "Bash(git checkout:*)",
      "Bash(RUSTFLAGS=\"-D warnings\" cargo check -p integration-tests --lib)",
      "Bash(RUSTFLAGS=\"-D warnings\" cargo clippy -p integration-tests --tests)",
      "mcp__linear-server__get_issue",
      "WebFetch(domain:openrouter.ai)",
      "Bash(env TEST_LOG=1 cargo nextest run -p integration-tests forward_token_disabled_uses_configured_key --no-capture)",
      "Bash(./target/debug/nexus:*)",
      "Bash(timeout:*)",
      "mcp__zen__chat",
      "Bash(./target/release/nexus:*)",
      "Bash(export:*)",
      "Bash(export GOOGLE_API_KEY=\"test-google-key\")",
      "Bash(/home/pimeys/code/grafbase/nexus/target/release/nexus:*)",
      "Bash(git tag:*)",
      "Bash(git log:*)",
      "WebFetch(domain:grantslatton.com)",
      "mcp__linear-server__get_document",
      "Bash(RUST_TEST_THREADS=1 cargo test -p config)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests token_rate_limit_enforced_with_client_id --no-capture)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests no_client_id_allows_requests --no-capture)",
      "Bash(RUST_BACKTRACE=1 env TEST_LOG=debug cargo nextest run -p integration-tests token_rate_limit_enforced_with_client_id --no-capture)",
      "Bash(env TEST_LOG=trace cargo nextest run -p integration-tests token_rate_limit_enforced_with_client_id --no-capture)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests group_based_rate_limits --no-capture)",
      "Bash(RUSTFLAGS=\"-D warnings\" cargo clippy --tests)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests llm::token_rate_limiting --no-capture)",
      "Bash(TEST_LOG=debug cargo nextest run -p integration-tests oauth2::token_rate_limiting::jwt_subject_used_as_client_id_for_rate_limiting --no-capture)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests oauth2::token_rate_limiting::jwt_subject_used_as_client_id_for_rate_limiting --no-capture)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests oauth2::token_rate_limiting --no-capture)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests oauth2::mcp::initialization_with_valid_oauth --no-capture)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests llm::token_rate_limiting::exact_boundary_conditions --no-capture)",
      "Bash(docker compose:*)",
      "Bash(env TEST_LOG=1 cargo nextest run -p integration-tests two_jwt_users_independent_rate_limits --no-capture)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests llm::token_limiting::edge_cases::rate_limit_exceeded_response_format --no-capture)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests rate_limiting::memory --no-capture)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests rate_limiting::memory::per_ip_rate_limit_basic --no-capture)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests llm::token_limiting --no-capture)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests exact_boundary_conditions --no-capture)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests test_rate_limiting_with_different_client_ids --no-capture)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests test_rate_limiting_with_sub_claim --no-capture)",
      "Bash(chmod:*)",
      "Bash(./update_tests.sh)",
      "Bash(./fix_tests.sh)",
      "Bash(__NEW_LINE__ python3 /home/pimeys/code/grafbase/nexus/fix_all_tests.py /home/pimeys/code/grafbase/nexus/crates/integration-tests/tests/llm/token_limiting.rs)",
      "Bash(__NEW_LINE__ python3 /home/pimeys/code/grafbase/nexus/fix_all_tests.py /home/pimeys/code/grafbase/nexus/crates/integration-tests/tests/llm/token_limiting/redis.rs)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests rate_limiting::memory::global_rate_limit_basic --no-capture)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests concurrent_token_requests_memory --no-capture)",
      "Bash(env TEST_LOG=1 cargo nextest run -p integration-tests request_burst_capacity_verification --no-capture)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests llm::token_limiting::redis::rate_limiting_with_headers --no-capture)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests llm::token_limiting::group_based_rate_limits --no-capture)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests llm::token_limiting::rate_limit_hierarchy_resolution --no-capture)",
      "WebFetch(domain:grafbase.com)",
      "Bash(cargo download:*)",
      "Bash(cargo rustdoc:*)",
      "Bash(sed:*)",
      "Bash(cargo fix:*)",
      "Bash(TEST_LOG=debug cargo nextest run no_tools_by_default)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests custom_mcp_path_with_tools --no-capture)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests pmcp_client_can_list_tools --no-capture)",
      "Bash(cargo expand:*)",
      "Bash(TEST_LOG=debug cargo nextest run pmcp_client_can_list_tools --no-capture)",
      "Bash(env TEST_LOG=debug cargo nextest run pmcp_client_can_list_tools --no-capture)",
      "Bash(env RUST_BACKTRACE=1 cargo nextest run -p integration-tests pmcp_client_can_list_tools --no-capture)",
      "Bash(env RUST_BACKTRACE=1 TEST_LOG=debug cargo nextest run -p integration-tests pmcp_client_can_list_tools --no-capture)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests pmcp::pmcp_client_can_search_tools --no-capture)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests pmcp --no-capture)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests mcp_compatibility::execute_passthrough_unaffected_by_config --no-capture)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests no_tools_by_default --no-capture)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests csrf::disabled_allows_mcp_protocol --no-capture)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests stdio::stdio_basic_echo_tool --no-capture)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests mcp_compatibility::search_structured_content_enabled_by_default --no-capture)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests oauth2::forwarding::single_downstream_token_forwarding --no-capture)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests oauth2::forwarding::token_forwarding_with_search --no-capture)",
      "Bash(env TEST_LOG=1 cargo nextest run -p integration-tests oauth2::forwarding::token_forwarding_with_search --no-capture)",
      "Bash(env RUST_LOG=pmcp=trace,mcp=debug cargo nextest run -p integration-tests oauth2::forwarding::token_forwarding_with_search --no-capture)",
      "Bash(cargo search:*)",
      "Bash(cp:*)",
      "WebSearch",
      "WebFetch(domain:docs.aws.amazon.com)",
      "WebFetch(domain:docs.mistral.ai)",
      "WebFetch(domain:llama.developer.meta.com)",
      "WebFetch(domain:huggingface.co)",
      "Bash(for file in crates/llm/src/provider/bedrock/families/*/output.rs crates/llm/src/provider/google/output.rs)",
      "Bash(do)",
      "Bash(echo:*)",
      "Bash(done)",
      "Bash(rustc:*)",
      "Bash(/tmp/test_sonic_deser:*)",
      "Bash(cargo run:*)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests anthropic_tool_calling_basic --no-capture)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests anthropic_tool_calling_streaming --no-capture)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests anthropic --no-capture)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests anthropic_tool_message_handling --no-capture)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests llm::anthropic::tools --no-capture)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests llm::anthropic::basic --no-capture)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests anthropic_specific_tool_choice --no-capture)",
      "Bash(./debug_tool_choice)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests debug_tool_choice_formats --no-capture)",
      "mcp__zen__debug",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests debug_anthropic_tool_choice_serialization --no-capture)",
      "Bash(env TEST_LOG=debug cargo test -p integration-tests test_adjacently_tagged_tool_choice --nocapture)",
      "Bash(env TEST_LOG=debug cargo test --bin test_adjacently_tagged test_adjacently_tagged_tool_choice -- --nocapture)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests test_adjacently_tagged_tool_choice --no-capture)",
      "mcp__zen__codereview",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests google_tool_calling_basic --no-capture)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests google_tool_calling_streaming --no-capture)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests google_tool_message_handling --no-capture)",
      "Bash(./test_tool_conversation.sh:*)",
      "Bash(/tmp/debug_tool_response)",
      "Bash(RUST_LOG=debug ./test_tool_conversation.sh)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests llm::bedrock::bedrock_deepseek_chat_completion --no-capture)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests llm::bedrock::live --no-capture)",
      "Bash(env AWS_PROFILE=sandbox BEDROCK_LIVE_TESTS=true cargo test -p integration-tests bedrock::live -- --ignored)",
      "Bash(env AWS_PROFILE=sandbox BEDROCK_LIVE_TESTS=true cargo test llm::bedrock::live::live_bedrock_cohere_command_r_multi_turn -- --ignored)",
      "Bash(env AWS_PROFILE=sandbox BEDROCK_LIVE_TESTS=true RUST_LOG=debug cargo test llm::bedrock::live::live_bedrock_cohere_command_r_multi_turn -- --ignored --nocapture)",
      "Bash(env AWS_PROFILE=sandbox BEDROCK_LIVE_TESTS=true TEST_LOG=1 cargo test llm::bedrock::live::live_bedrock_cohere_command_r_multi_turn -- --ignored --nocapture)",
      "Bash(env AWS_PROFILE=sandbox BEDROCK_LIVE_TESTS=true TEST_LOG=debug cargo test llm::bedrock::live::live_bedrock_cohere_command_r_multi_turn -- --ignored --nocapture)",
      "Bash(env AWS_PROFILE=sandbox BEDROCK_LIVE_TESTS=true TEST_LOG=1 cargo test llm::bedrock::live::live_bedrock_cohere_command_r_tool_choice_required -- --ignored --nocapture)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests llm::bedrock::live::live_bedrock_cohere_command_r_multi_turn --no-capture)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests cohere_command_r_multi_turn --no-capture)",
      "Bash(RUST_BACKTRACE=1 cargo test -p integration-tests llm_case_insensitive_headers -- --nocapture)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests mcp_forward_headers --no-capture)",
      "Bash(env TEST_LOG=1 cargo nextest run -p integration-tests header_rules --no-capture)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests mcp_complex_header_rules --no-capture)",
      "Bash(env TEST_LOG=debug cargo test -p integration-tests mcp_complex_header_rules -- --nocapture)",
      "Bash(env TEST_LOG=1 cargo nextest run -p integration-tests header_rules::mcp --no-capture)",
      "Bash(env TEST_LOG=1 cargo nextest run -p integration-tests header_rules --no-capture --no-fail-fast)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests header_rules --no-capture)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests header_rules::mcp --no-capture)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests header_rules::mcp::mcp_insert_static_headers --no-capture)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests mcp_case_insensitive_headers --no-capture)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests mcp_insert_static_headers --no-capture)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests header_rules::llm_simple --no-capture)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests header_rules::llm_simple::llm_headers_config_valid --no-capture)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests header_rules::mcp_header_validation::validate_no_automatic_forwarding --no-capture)",
      "Bash(aws:*)",
      "Bash(AWS_PROFILE=sandbox AWS_REGION=us-east-1 BEDROCK_LIVE_TESTS=true cargo test -p integration-tests verify_token_counting_claude3_sonnet_streaming -- --ignored --nocapture)",
      "Bash(AWS_PROFILE=sandbox AWS_REGION=us-east-1 BEDROCK_LIVE_TESTS=true cargo test -p integration-tests bedrock::live::verify_token_counting -- --ignored --nocapture)",
      "Bash(AWS_PROFILE=sandbox AWS_REGION=us-east-1 BEDROCK_LIVE_TESTS=true cargo nextest run -p integration-tests verify_token_counting)",
      "Bash(AWS_PROFILE=sandbox AWS_REGION=us-east-1 BEDROCK_LIVE_TESTS=true cargo nextest run -p integration-tests live_bedrock_verify_token_counting --no-capture)",
      "Bash(AWS_PROFILE=sandbox AWS_REGION=us-east-1 BEDROCK_LIVE_TESTS=true cargo test -p integration-tests llm::bedrock::live::live_bedrock_verify_token_counting_claude3_sonnet -- --ignored --nocapture)",
      "Bash(AWS_PROFILE=sandbox AWS_REGION=us-east-1 BEDROCK_LIVE_TESTS=true cargo test -p integration-tests llm::bedrock::live::live_bedrock_verify_token_counting_streaming_claude3_sonnet -- --ignored --nocapture)",
      "Bash(AWS_PROFILE=sandbox AWS_REGION=us-east-1 BEDROCK_LIVE_TESTS=true cargo test -p integration-tests verify_token_counting -- --ignored --nocapture)",
      "Bash(AWS_PROFILE=sandbox AWS_REGION=us-east-1 BEDROCK_LIVE_TESTS=true cargo test -p integration-tests live_bedrock_verify_streaming_token_counting_multiple_models -- --ignored --nocapture)",
      "Bash(AWS_PROFILE=sandbox AWS_REGION=us-east-1 BEDROCK_LIVE_TESTS=true cargo nextest run -p integration-tests token_counting --no-capture)",
      "Bash(AWS_PROFILE=sandbox AWS_REGION=us-east-1 BEDROCK_LIVE_TESTS=true cargo test -p integration-tests token_counting -- --ignored)",
      "WebFetch(domain:opentelemetry.io)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests llm_rate_limit_metrics --no-capture)",
      "Bash(env TEST_LOG=1 cargo nextest run -p integration-tests llm_finish_reason_metrics --no-capture)",
      "Bash(env TEST_LOG=1 cargo nextest run -p integration-tests llm_streaming_finish_reason_metrics --no-capture)",
      "Bash(env TEST_LOG=1 cargo nextest run -p integration-tests llm_rate_limit_metrics --no-capture)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests llm_finish_reason_metrics --no-capture)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests llm_streaming_finish_reason_metrics --no-capture)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests llm_streaming_operation_metrics --no-capture)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests llm_token_usage_metrics --no-capture)",
      "Bash(redis-cli:*)",
      "Bash(docker exec:*)",
      "Bash(env TEST_LOG=1 cargo nextest run -p integration-tests redis_command_duration_metrics --no-capture)",
      "Bash(env TEST_LOG=1 cargo nextest run -p integration-tests telemetry::metrics::redis::redis_command_duration_metrics --no-capture)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests redis_command_duration_metrics --no-capture)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests redis_check_and_consume_tokens_operation --no-capture)",
      "Bash(env TEST_LOG=1 cargo nextest run -p integration-tests redis_command_duration_check_and_consume --no-capture)",
      "Bash(env TEST_LOG=1 cargo nextest run -p integration-tests telemetry::metrics::redis --no-capture)",
      "Bash(env TEST_LOG=1 cargo nextest run -p integration-tests redis_check_and_consume_tokens_operation --no-capture)",
      "Bash(env TEST_LOG=1 cargo nextest run -p integration-tests telemetry::metrics::redis --no-capture --no-fail-fast)",
      "Bash(docker restart:*)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests tool_call_search_metrics --no-capture)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests telemetry::metrics::mcp::search_tool_metrics --no-capture)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests execute_passthrough_unaffected_by_config --no-capture)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests client_id_cors_preflight --no-capture)",
      "Bash(env TEST_LOG=1 cargo nextest run -p integration-tests cors_preflight --no-capture)",
      "Bash(env TEST_LOG=1 cargo nextest run -p integration-tests cors_preflight_bypasses_client_id_middleware --no-capture)",
      "Bash(env TEST_LOG=1 cargo nextest run -p integration-tests oauth2::client_id_cors --no-capture)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests google_tool_with_additional_properties_stripped --no-capture)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests google_mock_rejects --no-capture)",
      "Bash(docker build:*)",
      "Bash(docker ps:*)",
      "Bash(python3:*)",
      "Bash(for provider in google bedrock)",
      "Bash(for:*)",
      "Bash(if [ -f \"$file\" ])",
      "Bash(then)",
      "Bash(fi)",
      "Bash(/tmp/fix_llm_tests.sh:*)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests llm::forward_token::forward_token_disabled_ignores_header --no-capture)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests llm::forward_token --no-capture)",
      "Bash(sudo lsof:*)",
      "Bash(docker logs:*)",
      "Bash(env TEST_LOG=1 cargo nextest run -p integration-tests telemetry::metrics::llm::llm_endpoint_metrics --no-capture)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests rate_limiting::redis::basic_redis_rate_limiting --no-capture)",
      "Bash(nc:*)",
      "Bash(env TEST_LOG=1 cargo nextest run -p integration-tests oauth2::token_limiting::test_rate_limiting_with_different_client_ids --no-capture)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests telemetry::metrics::redis::redis_check_and_consume_tokens_operation --no-capture)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests telemetry::tracing::rate_limit::redis_rate_limit_exceeded_span_has_error --no-capture)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests telemetry::tracing::rate_limit::redis_rate_limit_exceeded_span_has_error telemetry::tracing::rate_limit::redis_token_rate_limit_creates_span --no-capture)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests llm::openai::chat_completions_simple --no-capture)",
      "Bash(env TEST_LOG=debug cargo nextest run -p integration-tests llm::forward_token::forward_token_disabled_uses_configured_key --no-capture)",
      "Bash(do echo \"Fixing $file\")",
      "Bash(while read file)",
      "Bash(do echo \"=== $file ===\")",
      "Bash(do if [ -f \"$file\" ])",
      "Bash(jj resolve:*)",
      "Bash(jj new:*)",
      "Bash(jj bookmark:*)",
      "Bash(AWS_PROFILE=sandbox AWS_REGION=us-east-1 BEDROCK_LIVE_TESTS=true cargo test -p integration-tests llm::bedrock::live -- --ignored --nocapture)",
      "Bash(env:*)",
      "Bash(jj edit:*)",
      "Bash(gh repo clone:*)",
      "Bash(git sparse-checkout:*)",
      "Bash(docker stop:*)",
      "Bash(RUST_LOG=llm::messages=debug cargo nextest run -p integration-tests dedup_content_tool_ids --no-capture)",
      "Bash(RUST_LOG=warn cargo nextest run -p integration-tests dedup_content_tool_ids --no-capture)",
      "mcp__zen__thinkdeep",
      "Bash(RUST_LOG=debug cargo nextest run -p integration-tests openai_specific_tool_choice --no-capture)",
      "Read(//home/pimeys/.cargo/registry/src/**)",
      "Bash(TEST_LOG=debug cargo nextest run -p integration-tests openai_tool_calling_basic --no-capture)",
      "Bash(RUST_LOG=debug cargo nextest run -p integration-tests openai_tool_calling_basic)",
      "Bash(RUST_BACKTRACE=1 env TEST_LOG=debug cargo nextest run -p integration-tests llm::anthropic::duplicate_tool_ids::multiple_tool_calls_remain_unique --no-capture)",
      "Bash(RUST_LOG=debug cargo nextest run -p integration-tests google_strips_schema_field_from_tools --no-capture)",
      "Bash(RUST_LOG=debug cargo insta test llm::anthropic::edge_cases_comprehensive::error_propagation_missing_headers --accept)",
      "Bash(do cargo nextest run -p integration-tests $test)",
      "Bash(RUST_LOG=llm::messages::unified::to_anthropic=debug cargo nextest run -p integration-tests anthropic::duplicate_tool_ids::no_duplicate_tool_ids_in_conversion --no-capture)",
      "Read(//home/pimeys/.cargo/**)",
      "WebFetch(domain:arxiv.org)",
      "Bash(TEST_LOG=debug cargo nextest run -p integration-tests mcp_access_control::deny_groups_blocks_specific_groups --no-capture)",
      "WebFetch(domain:linear.app)",
      "mcp__linear-server__list_documents",
      "Bash(RUST_LOG=warn cargo nextest run --test mcp_invalid_tool_config warns_on_nonexistent_tool_config --no-capture)",
      "Bash(do env TEST_LOG=0 cargo nextest run -p integration-tests search_mixed_permission_levels)",
      "Bash(do echo \"Run $i:\")",
      "Bash(do env TEST_LOG=0 cargo nextest run -p integration-tests group_based_access_control::search_access::search_respects_tool_level_overrides --no-capture)",
      "Bash(jj op:*)",
      "WebFetch(domain:docs.claude.com)",
      "Bash(git show:*)",
      "Bash(do echo \"=== $f ===\")",
      "Bash(npm view:*)",
      "Bash(tar:*)",
      "Bash(git clone:*)",
      "Bash(git cat-file:*)",
      "Bash(git merge-base:*)",
      "Bash(git add:*)",
      "Bash(RUST_LOG=debug cargo nextest run -p integration-tests pattern_routing_case_insensitive_matching --no-capture)",
      "WebFetch(domain:nexusrouter.com)"
    ],
    "deny": [],
    "defaultMode": "acceptEdits",
    "additionalDirectories": [
      "/tmp",
      "/home/pimeys/code"
    ]
  },
  "enableAllProjectMcpServers": true,
  "enabledMcpjsonServers": [
    "zen"
  ]
}